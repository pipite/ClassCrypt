#include <windows.h>
#include <bcrypt.h>
#include <vector>
#include <iostream>
#include <string>

#pragma comment(lib, "bcrypt.lib")

// G√©n√©rer une cl√© AES-256 al√©atoire
bool GenerateRandomAESKey(std::vector<BYTE>& key) {
    key.resize(32); // Cl√© AES-256 = 32 octets
    return BCryptGenRandom(NULL, key.data(), key.size(), BCRYPT_USE_SYSTEM_PREFERRED_RNG) == STATUS_SUCCESS;
}

// D√©river une cl√© AES-256 depuis un mot de passe avec PBKDF2
bool GenerateAESKeyFromPassword(const std::string& password, std::vector<BYTE>& salt, std::vector<BYTE>& key) {
    key.resize(32); // Cl√© AES-256
    salt.resize(16); // Sel de 128 bits
    BCryptGenRandom(NULL, salt.data(), salt.size(), BCRYPT_USE_SYSTEM_PREFERRED_RNG); // G√©n√©rer un sel al√©atoire

    BCRYPT_ALG_HANDLE hAlg = NULL;
    if (BCryptOpenAlgorithmProvider(&hAlg, BCRYPT_PBKDF2_ALGORITHM, NULL, 0) != STATUS_SUCCESS) return false;

    if (BCryptDeriveKeyPBKDF2(hAlg, (PBYTE)password.data(), password.size(), salt.data(), salt.size(), 100000, key.data(), key.size(), 0) != STATUS_SUCCESS) {
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return false;
    }

    BCryptCloseAlgorithmProvider(hAlg, 0);
    return true;
}

bool EncryptAES_GCM(const std::vector<BYTE>& key, const std::vector<BYTE>& plaintext,
                    std::vector<BYTE>& ciphertext, std::vector<BYTE>& iv, std::vector<BYTE>& tag) {
    BCRYPT_ALG_HANDLE hAlg = NULL;
    BCRYPT_KEY_HANDLE hKey = NULL;

    // Ouvrir AES-GCM
    if (BCryptOpenAlgorithmProvider(&hAlg, BCRYPT_AES_ALGORITHM, NULL, 0) != STATUS_SUCCESS) return false;
    if (BCryptGenerateSymmetricKey(hAlg, &hKey, NULL, 0, (PUCHAR)key.data(), key.size(), 0) != STATUS_SUCCESS) return false;

    // G√©n√©rer un IV al√©atoire (12 octets recommand√©)
    iv.resize(12);
    BCryptGenRandom(NULL, iv.data(), iv.size(), BCRYPT_USE_SYSTEM_PREFERRED_RNG);

    // Configurer AES-GCM
    tag.resize(16);
    ciphertext.resize(plaintext.size());

    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO authInfo;
    BCRYPT_INIT_AUTH_MODE_INFO(authInfo);
    authInfo.pbNonce = iv.data();
    authInfo.cbNonce = iv.size();
    authInfo.pbTag = tag.data();
    authInfo.cbTag = tag.size();

    DWORD cbResult = 0;
    if (BCryptEncrypt(hKey, (PUCHAR)plaintext.data(), plaintext.size(), &authInfo, iv.data(), iv.size(),
                      ciphertext.data(), ciphertext.size(), &cbResult, 0) != STATUS_SUCCESS) {
        BCryptDestroyKey(hKey);
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return false;
    }

    BCryptDestroyKey(hKey);
    BCryptCloseAlgorithmProvider(hAlg, 0);
    return true;
}

bool DecryptAES_GCM(const std::vector<BYTE>& key, const std::vector<BYTE>& ciphertext,
                    const std::vector<BYTE>& iv, const std::vector<BYTE>& tag, std::vector<BYTE>& plaintext) {
    BCRYPT_ALG_HANDLE hAlg = NULL;
    BCRYPT_KEY_HANDLE hKey = NULL;

    if (BCryptOpenAlgorithmProvider(&hAlg, BCRYPT_AES_ALGORITHM, NULL, 0) != STATUS_SUCCESS) return false;
    if (BCryptGenerateSymmetricKey(hAlg, &hKey, NULL, 0, (PUCHAR)key.data(), key.size(), 0) != STATUS_SUCCESS) return false;

    plaintext.resize(ciphertext.size());

    // Configurer AES-GCM
    BCRYPT_AUTHENTICATED_CIPHER_MODE_INFO authInfo;
    BCRYPT_INIT_AUTH_MODE_INFO(authInfo);
    authInfo.pbNonce = (PUCHAR)iv.data();
    authInfo.cbNonce = iv.size();
    authInfo.pbTag = (PUCHAR)tag.data();
    authInfo.cbTag = tag.size();

    DWORD cbResult = 0;
    if (BCryptDecrypt(hKey, (PUCHAR)ciphertext.data(), ciphertext.size(), &authInfo, (PUCHAR)iv.data(), iv.size(),
                      plaintext.data(), plaintext.size(), &cbResult, 0) != STATUS_SUCCESS) {
        BCryptDestroyKey(hKey);
        BCryptCloseAlgorithmProvider(hAlg, 0);
        return false;
    }

    BCryptDestroyKey(hKey);
    BCryptCloseAlgorithmProvider(hAlg, 0);
    return true;
}

int main() {
    std::vector<BYTE> key, salt, iv, tag, ciphertext, decryptedText;
    std::string password = "SuperSecret123";

    // 1. G√©n√©rer une cl√© AES-256
    GenerateAESKeyFromPassword(password, salt, key);

    // 2. D√©finir le message √† chiffrer
    std::vector<BYTE> plaintext = {'H', 'e', 'l', 'l', 'o', ' ', 'C', '+', '+', '!', ' ', 'A', 'E', 'S', '-'};

    // 3. Chiffrement AES-GCM
    if (EncryptAES_GCM(key, plaintext, ciphertext, iv, tag)) {
        std::cout << "Chiffrement r√©ussi !" << std::endl;
    } else {
        std::cerr << "Erreur lors du chiffrement !" << std::endl;
        return -1;
    }

    // 4. D√©chiffrement AES-GCM
    if (DecryptAES_GCM(key, ciphertext, iv, tag, decryptedText)) {
        std::cout << "D√©chiffrement r√©ussi : ";
        for (auto c : decryptedText) std::cout << (char)c;
        std::cout << std::endl;
    } else {
        std::cerr << "√âchec du d√©chiffrement !" << std::endl;
        return -1;
    }

    return 0;
}

‚úÖ Utilisation de std::vector<BYTE> pour √©viter les d√©passements m√©moire.
‚úÖ Facilit√© d‚Äôextension et gestion automatique des tailles de buffers.

üîπ 1Ô∏è‚É£ G√©n√©ration d'une cl√© AES-256 s√©curis√©e
On utilise BCryptGenRandom pour une cl√© al√©atoire ou PBKDF2 pour une cl√© bas√©e sur un mot de passe.


Pourquoi cette solution est optimale ?
üîí Fonction	üîê S√©curit√©
AES-256	S√©curis√© contre le brute-force.
AES-GCM	Int√®gre un tag d‚Äôauthentification pour √©viter la falsification.
PBKDF2 (100 000 it√©rations)	Prot√®ge contre le brute-force et les rainbow tables.
std::vector	Gestion automatique de la m√©moire.

üîπ Pourquoi cette impl√©mentation est s√©curis√©e ?
‚úî Si le tag est incorrect, le d√©chiffrement √©choue.
‚úî Emp√™che les attaques par modification des donn√©es.

üîπ Pourquoi AES-GCM ?
‚úî IV unique √† chaque chiffrement.
‚úî Tag d'authentification pour √©viter la falsification.

üîπ Pourquoi utiliser std::vector ?
‚úî Gestion automatique de la m√©moire (√©vite les fuites).
‚úî S√©curis√© contre les d√©passements m√©moire.
‚úî Facile √† passer en param√®tre.